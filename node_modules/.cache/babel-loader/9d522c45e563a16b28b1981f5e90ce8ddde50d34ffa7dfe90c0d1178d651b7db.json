{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhagyashri Mathur\\\\Documents\\\\netflix-clone\\\\src\\\\App.jsx\";\nimport React from \"react\";\nimport \"./index.css\";\nimport Card from \"./Cards\";\nimport Sdata from \"./Sdata\";\nimport Netflix from '';\n\n// console.log(Sdata[0].sname);\n\n// if/else \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst favSeries = \"amazon\";\nconst FavS = () => {\n  if (favSeries === \"netflix\") {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      imgsrc: Sdata[1].imgsrc,\n      title: Sdata[1].title,\n      sname: Sdata[1].sname,\n      link: Sdata[1].link\n    }, Sdata[1].id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      imgsrc: Sdata[4].imgsrc,\n      title: Sdata[4].title,\n      sname: Sdata[4].sname,\n      link: Sdata[4].link\n    }, Sdata[4].id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c = FavS;\nconst App = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"heading_style\",\n    children: \"List of top 5 Netflix Series in 2023\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(FavS, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n// end for if else\n\n// this is for all\n// const App = () => (\n//   <>\n//     <h1 className=\"heading_style\">List of top 5 Netflix Series in 2023</h1>\n//     {/* how to use map method  */}\n//     {Sdata.map((val, index) => {\n//       console.log(index);\n//       return (\n//         <Card\n//           key={val.id}\n//           imgsrc={val.imgsrc}\n//           title={val.title}\n//           sname={val.sname}\n//           link={val.link}\n//         />\n//       );\n//     })}\n//   </>\n// );\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FavS\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Card","Sdata","Netflix","jsxDEV","_jsxDEV","Fragment","_Fragment","favSeries","FavS","imgsrc","title","sname","link","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","className","_c2","$RefreshReg$"],"sources":["C:/Users/Bhagyashri Mathur/Documents/netflix-clone/src/App.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nimport Card from \"./Cards\";\r\nimport Sdata from \"./Sdata\";\r\nimport Netflix from ''\r\n\r\n// console.log(Sdata[0].sname);\r\n\r\n// if/else \r\nconst favSeries = \"amazon\";\r\nconst FavS = () => {\r\n  if (favSeries === \"netflix\") {\r\n    return (\r\n      <Card\r\n        key={Sdata[1].id}\r\n        imgsrc={Sdata[1].imgsrc}\r\n        title={Sdata[1].title}\r\n        sname={Sdata[1].sname}\r\n        link={Sdata[1].link}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <Card\r\n        key={Sdata[4].id}\r\n        imgsrc={Sdata[4].imgsrc}\r\n        title={Sdata[4].title}\r\n        sname={Sdata[4].sname}\r\n        link={Sdata[4].link}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst App = () => (\r\n  <>\r\n    <h1 className=\"heading_style\">List of top 5 Netflix Series in 2023</h1>\r\n    <FavS />\r\n  </>\r\n);\r\n// end for if else\r\n\r\n// this is for all\r\n// const App = () => (\r\n//   <>\r\n//     <h1 className=\"heading_style\">List of top 5 Netflix Series in 2023</h1>\r\n//     {/* how to use map method  */}\r\n//     {Sdata.map((val, index) => {\r\n//       console.log(index);\r\n//       return (\r\n//         <Card\r\n//           key={val.id}\r\n//           imgsrc={val.imgsrc}\r\n//           title={val.title}\r\n//           sname={val.sname}\r\n//           link={val.link}\r\n//         />\r\n//       );\r\n//     })}\r\n//   </>\r\n// );\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AACpB,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,EAAE;;AAEtB;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,GAAG,QAAQ;AAC1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,IAAID,SAAS,KAAK,SAAS,EAAE;IAC3B,oBACEH,OAAA,CAACJ,IAAI;MAEHS,MAAM,EAAER,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAO;MACxBC,KAAK,EAAET,KAAK,CAAC,CAAC,CAAC,CAACS,KAAM;MACtBC,KAAK,EAAEV,KAAK,CAAC,CAAC,CAAC,CAACU,KAAM;MACtBC,IAAI,EAAEX,KAAK,CAAC,CAAC,CAAC,CAACW;IAAK,GAJfX,KAAK,CAAC,CAAC,CAAC,CAACY,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKjB,CAAC;EAEN,CAAC,MAAM;IACL,oBACEb,OAAA,CAACJ,IAAI;MAEHS,MAAM,EAAER,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAO;MACxBC,KAAK,EAAET,KAAK,CAAC,CAAC,CAAC,CAACS,KAAM;MACtBC,KAAK,EAAEV,KAAK,CAAC,CAAC,CAAC,CAACU,KAAM;MACtBC,IAAI,EAAEX,KAAK,CAAC,CAAC,CAAC,CAACW;IAAK,GAJfX,KAAK,CAAC,CAAC,CAAC,CAACY,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKjB,CAAC;EAEN;AACF,CAAC;AAACC,EAAA,GAtBIV,IAAI;AAwBV,MAAMW,GAAG,GAAGA,CAAA,kBACVf,OAAA,CAAAE,SAAA;EAAAc,QAAA,gBACEhB,OAAA;IAAIiB,SAAS,EAAC,eAAe;IAAAD,QAAA,EAAC;EAAoC;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACvEb,OAAA,CAACI,IAAI;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA,eACR,CACH;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAK,GAAA,GA1BMH,GAAG;AA4BT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}